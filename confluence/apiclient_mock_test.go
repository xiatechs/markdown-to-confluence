// Code generated by MockGen. DO NOT EDIT.
// Source: confluence_interface.go

// Package confluence is a generated GoMock package.
package confluence

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	markdown "github.com/xiatechs/markdown-to-confluence/markdown"
)

// MockAPIClienter is a mock of APIClienter interface.
type MockAPIClienter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClienterMockRecorder
}

// MockAPIClienterMockRecorder is the mock recorder for MockAPIClienter.
type MockAPIClienterMockRecorder struct {
	mock *MockAPIClienter
}

// NewMockAPIClienter creates a new mock instance.
func NewMockAPIClienter(ctrl *gomock.Controller) *MockAPIClienter {
	mock := &MockAPIClienter{ctrl: ctrl}
	mock.recorder = &MockAPIClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClienter) EXPECT() *MockAPIClienterMockRecorder {
	return m.recorder
}

// CreatePage mocks base method.
func (m *MockAPIClienter) CreatePage(root int, contents *markdown.FileContents, isroot bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", root, contents, isroot)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockAPIClienterMockRecorder) CreatePage(root, contents, isroot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockAPIClienter)(nil).CreatePage), root, contents, isroot)
}

// DeletePage mocks base method.
func (m *MockAPIClienter) DeletePage(pageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePage", pageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePage indicates an expected call of DeletePage.
func (mr *MockAPIClienterMockRecorder) DeletePage(pageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePage", reflect.TypeOf((*MockAPIClienter)(nil).DeletePage), pageID)
}

// FindPage mocks base method.
func (m *MockAPIClienter) FindPage(title string, many bool) (*PageResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPage", title, many)
	ret0, _ := ret[0].(*PageResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPage indicates an expected call of FindPage.
func (mr *MockAPIClienterMockRecorder) FindPage(title, many interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPage", reflect.TypeOf((*MockAPIClienter)(nil).FindPage), title, many)
}

// UpdatePage mocks base method.
func (m *MockAPIClienter) UpdatePage(pageID int, pageVersion int64, pageContents *markdown.FileContents, originalPage PageResults) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", pageID, pageVersion, pageContents, originalPage)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockAPIClienterMockRecorder) UpdatePage(pageID, pageVersion, pageContents, originalPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockAPIClienter)(nil).UpdatePage), pageID, pageVersion, pageContents, originalPage)
}

// UploadAttachment mocks base method.
func (m *MockAPIClienter) UploadAttachment(filename string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttachment", filename, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAttachment indicates an expected call of UploadAttachment.
func (mr *MockAPIClienterMockRecorder) UploadAttachment(filename, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttachment", reflect.TypeOf((*MockAPIClienter)(nil).UploadAttachment), filename, id)
}
