// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package filehandler is a generated GoMock package.
package filehandler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// ConvertFolder mocks base method.
func (m *MockFileHandler) ConvertFolder(filePath, pageTitle string, parentMetadata map[string]interface{}) (*FileContents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertFolder", filePath, pageTitle, parentMetadata)
	ret0, _ := ret[0].(*FileContents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertFolder indicates an expected call of ConvertFolder.
func (mr *MockFileHandlerMockRecorder) ConvertFolder(filePath, pageTitle, parentMetadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertFolder", reflect.TypeOf((*MockFileHandler)(nil).ConvertFolder), filePath, pageTitle, parentMetadata)
}

// ConvertMarkdown mocks base method.
func (m *MockFileHandler) ConvertMarkdown(filePath, pageTitle string, parentMetadata map[string]interface{}) (*FileContents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertMarkdown", filePath, pageTitle, parentMetadata)
	ret0, _ := ret[0].(*FileContents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertMarkdown indicates an expected call of ConvertMarkdown.
func (mr *MockFileHandlerMockRecorder) ConvertMarkdown(filePath, pageTitle, parentMetadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertMarkdown", reflect.TypeOf((*MockFileHandler)(nil).ConvertMarkdown), filePath, pageTitle, parentMetadata)
}

// ProcessOtherFile mocks base method.
func (m *MockFileHandler) ProcessOtherFile(filePath, pageTitle string, parentMetadata map[string]interface{}) (*FileContents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOtherFile", filePath, pageTitle, parentMetadata)
	ret0, _ := ret[0].(*FileContents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessOtherFile indicates an expected call of ProcessOtherFile.
func (mr *MockFileHandlerMockRecorder) ProcessOtherFile(filePath, pageTitle, parentMetadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOtherFile", reflect.TypeOf((*MockFileHandler)(nil).ProcessOtherFile), filePath, pageTitle, parentMetadata)
}
