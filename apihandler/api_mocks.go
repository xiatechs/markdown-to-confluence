// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package apihandler is a generated GoMock package.
package apihandler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	filehandler "github.com/xiatechs/markdown-to-confluence/filehandler"
)

// MockApiController is a mock of ApiController interface.
type MockApiController struct {
	ctrl     *gomock.Controller
	recorder *MockApiControllerMockRecorder
}

// MockApiControllerMockRecorder is the mock recorder for MockApiController.
type MockApiControllerMockRecorder struct {
	mock *MockApiController
}

// NewMockApiController creates a new mock instance.
func NewMockApiController(ctrl *gomock.Controller) *MockApiController {
	mock := &MockApiController{ctrl: ctrl}
	mock.recorder = &MockApiControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiController) EXPECT() *MockApiControllerMockRecorder {
	return m.recorder
}

// CRUD mocks base method.
func (m *MockApiController) CRUD(file *filehandler.FileContents, parentMetaData map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CRUD", file, parentMetaData)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CRUD indicates an expected call of CRUD.
func (mr *MockApiControllerMockRecorder) CRUD(file, parentMetaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CRUD", reflect.TypeOf((*MockApiController)(nil).CRUD), file, parentMetaData)
}
