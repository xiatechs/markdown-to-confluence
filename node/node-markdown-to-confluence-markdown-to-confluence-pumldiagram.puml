@startuml
namespace node {
    interface APIClienter  {
        + CreatePage(root int, contents *markdown.FileContents, isroot bool) (int, error)
        + DeletePage(pageID int) error
        + UpdatePage(pageID int, pageVersion int64, pageContents *markdown.FileContents, originalPage confluence.PageResults) (bool, error)
        + FindPage(title string, many bool) (*confluence.PageResults, error)
        + UploadAttachment(filename string, id int, index bool, indexid int) error

    }
    class Node << (S,Aquamarine) >> {
        - id int
        - alive bool
        - path string
        - hasIndex bool
        - root *Node
        - branches []*Node
        - titles []string
        - mu sync.RWMutex
        - indexPage bool

        - checkIfRootAlive(fpath string) 
        - fileInDirectoryCheck(fpath string, checking bool, folders bool) bool
        - checkIfMarkDown(fpath string, checking bool) bool
        - checkIfMarkDownFile(checking bool, name string) bool
        - checkIfFolder(fpath string) bool
        - checkOtherFileTypes(fpath string) 
        - checkIfGoFile(name string) 
        - checkForImages(name string) 
        - checkNodeRootIsNil(name string) 
        - checkConfluencePages(newPageContents *markdown.FileContents) error
        - newPage(newPageContents *markdown.FileContents) error
        - createOrUpdatePage(newPageContents *markdown.FileContents, pageResult *confluence.PageResults) error
        - addContents(newPageContents *markdown.FileContents) 
        - checkPageID(pageResult confluence.PageResults) error
        - findPagesToDelete(id string) 
        - deletePages(children *confluence.PageResults) 
        - deletePage(id string) 
        - withinDirectory(base string, path string) bool
        - generateMaster() 
        - generateChildPages() 
        - generateFolderPage(hasIndex bool, subindex int) error
        - generateTitles() (string, string)
        - generatePlantuml(fpath string) 
        - generatePlantumlImage(fpath string) error
        - generatePage(newPageContents *markdown.FileContents) error
        - iterate(justChecking bool, foldersOnly bool) bool
        - processGoFile(fpath string) error
        - processMarkDownIndex(path string, subindex int) (*markdown.FileContents, error)
        - processMarkDown(path string) error
        - uploadFile(path string, isIndexPage bool) 

        + Start(projectPath string) bool
        + Delete() 

    }
    class mockclient << (S,Aquamarine) >> {
        + CreatePage(root int, contents *markdown.FileContents, isroot bool) (int, error)
        + DeletePage(pageID int) error
        + UpdatePage(pageID int, pageVersion int64, pageContents *markdown.FileContents, originalPage confluence.PageResults) (bool, error)
        + FindPage(title string, many bool) (*confluence.PageResults, error)
        + UploadAttachment(filename string, id int, index bool, indexid int) error

    }
}

"node.APIClienter" <|-- "node.mockclient"

@enduml
