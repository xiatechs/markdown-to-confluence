@startuml
namespace node {
    class Node << (S,Aquamarine) >> {
        - id int
        - alive bool
        - path string
        - root *Node
        - branches []*Node
        - titles []string
        - mu sync.RWMutex

        - checkIfRootAlive(fpath string) 
        - fileInDirectoryCheck(fpath string, checking bool, folders bool) bool
        - checkIfMarkDown(fpath string, checking bool) bool
        - checkIfMarkDownFile(checking bool, name string) bool
        - checkIfFolder(fpath string) bool
        - checkOtherFileTypes(fpath string) 
        - checkIfGoFile(name string) 
        - checkForImages(name string) 
        - checkNodeRootIsNil(name string) 
        - checkConfluencePages(newPageContents *markdown.FileContents) error
        - addContents(newPageContents *markdown.FileContents) 
        - checkPageID(pageResult confluence.PageResults) error
        - findPagesToDelete(id string) 
        - deletePages(children *confluence.PageResults) 
        - deletePage(id string) 
        - generateMaster() 
        - generateChildPages(thereAreValidFiles bool) 
        - generateFolderPage() 
        - generateTODOPage(percentage string) 
        - generateTitles() (string, string)
        - generatePlantuml(fpath string) 
        - generatePlantumlImage(fpath string) 
        - generatePage(newPageContents *markdown.FileContents) error
        - iterate(justChecking bool, foldersOnly bool) bool
        - processGoFile(fpath string) error
        - processMarkDown(path string) error
        - uploadFile(path string) 

        + Start(projectPath string, client *confluence.APIClient) bool
        + Delete() 

    }
}


@enduml
